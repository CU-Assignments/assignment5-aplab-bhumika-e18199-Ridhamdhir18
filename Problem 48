#include <iostream>
#include <limits.h> 

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        // Call helper function with the initial range of INT_MIN to INT_MAX
        return isValidBSTHelper(root, LONG_MIN, LONG_MAX);
    }
    
    bool isValidBSTHelper(TreeNode* node, long minVal, long maxVal) {
        if (node == NULL) {
            return true;
        }
        
        // Check if the current node's value is within the valid range
        if (node->val <= minVal || node->val >= maxVal) {
            return false;
        }
        return isValidBSTHelper(node->left, minVal, node->val) && 
               isValidBSTHelper(node->right, node->val, maxVal);
    }
};

int main() {
    TreeNode* root1 = new TreeNode(2);
    root1->left = new TreeNode(1);
    root1->right = new TreeNode(3);
    
    Solution solution;
    cout << "Is Valid BST (Example 1): " << solution.isValidBST(root1) << endl;
    TreeNode* root2 = new TreeNode(5);
    root2->left = new TreeNode(1);
    root2->right = new TreeNode(4);
    root2->right->left = new TreeNode(3);
    root2->right->right = new TreeNode(6);

    cout << "Is Valid BST (Example 2): " << solution.isValidBST(root2) << endl; 

    return 0;
}
